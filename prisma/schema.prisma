// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

enum Gender {
    MALE
    FEMALE
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id        String    @id @default(cuid())
    name      String?
    birthday  DateTime?
    firstName String?
    lastName  String?
    gender    Gender?
    address   String?

    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Posts         Post[]
    Likes         Likes[]
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id      Int    @id @default(autoincrement())
    name    String
    title   String
    content String

    authorId String
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    Tag Tags[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([authorId])
}

model Tags {
    postId Int    @id
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    tag    String

    @@index([postId])
}

model Likes {
    userId String @id
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Comment {
    id      Int    @id @default(autoincrement())
    content String
    postId  Int
    replyTo Int?

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([authorId])
}
